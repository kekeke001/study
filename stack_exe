1、I，O分别表示入栈和出栈操作，写出一个算法，判定所给的序列是否合法，如果合法返回true，否则返回false。(假定被判定的操作的操作序列已存入一维数组中)
bool Judge(char A[]){
	int j=k=0;
	while(A[i]!='\0')  //‘\0’是字符串的结束符号，由编译器自动加上
		switch(A[i]){
			case 'I':j++;break;
			case 'O':k++;
				if(k>j)
					printf("序列非法\n");
					exit(0);
		}
		i++;
	if(j!=k)
		printf("序列非法\n");
		return false;
	else
		printf("序列合法\n");
		return true;
}

2、设单链表的表头指针为L，结点结构由data 和next两个域构成，其中data域为字符型，试设计算法判断该链表的全部n个字符是否中心对称，例如xyx，xyyx都是中心对称
bool duicheng(LinkList L,int n){
	LNode *p=L->next;
	char s[n/2];
	for(int i=0;i<n/2;i++)
		s[i]=p->data;
		p=p->next;
	i--;
	if(n%2==1)
		p=p->next;
	while(p && p->data==s[i])
		i--;
		p=p->next;
	if(i==-1)
		return true;
	else
		return false;
}


3、设有两个栈S1，S2都采用顺序栈方式，并共享一个存储区[0,...,maxsize-1],为了尽量利用空间，减少溢出的可能，可采用栈顶相向(相对方向)，迎面增长的存储方式，试设计S1，S2有关入栈和出栈的操作算法。
# define MaxSize 10
typedef struct{//定义
	int data[MaxSize];
	int top0;//0号栈顶指针
	int top1;//1号栈顶指针
}ShStack;
ShStack S;
void InitStack(ShStack &S){//初始化
	S.top0=-1;
	S.top1=MaxSize;
}
bool push(ShStack &S,int i,int x){//入栈,i为栈号
	if(i<0 || i>1)//栈号不对
		return false;
	if(S.top0+1=S.top1)
		return false;//栈满
	switch(i){
		case 0:s.data[++S.top0]=x; return 1;break;
		case 1:s.data[--S.top1]=x; return 1;
	}
}

bool pop(ShStack &S,int i){
	if(i<0 || i>1)//栈号不对
		return false;
	switc(i){
		case 0:
			if(S.top0==-1)
				return false;
			else
				return S.data[S.top0--];
			break;
		case 1:
			if(S.top1==MaxSize)
				return false;
			else
				return S.data[S.top1++];
						
	}
}

4、若希望循环队列中的元素都能得到利用，则需要设置一个标志域tag，并以tag的值为0或者为1来区分队头指针front和队尾指针rear相同时队列是空还是满的算法，试编写与此节后相应的入队算法和出队算法
# define MaxSize 50
typedef struct{
	int data[MaxSize];
	int front,rear;//头，尾
	int tag;//进队为1，出队为0
}SqQueue;

bool EnQueue(SqQueue &Q,int x){
	if(Q.front == Q.rear && tag=1)
		return false;//已满
	Q.data[rear]=x
	Q.rear=(Q.rear+1)%MaxSize;
	Q.tag=1;
	return true;
}

bool DeQueue(SqQueue &Q,int &x){
	if(Q.front == Q.rear && tag=0)
		return false;//空队列
	x=Q.data[front]
	Q.front=(Q.front+1)%MaxSize;
	Q.tag=0;
	return true;
}

5、Q是一个队列，S是一个空栈，实现将队列中元素逆置的算法
void Invesre(Stack S,Queue Q){
	while(!QueueEmpty(Q))
		x=DeQueue(Q);
		push(s,x);
	while(!StackEmpty(S))
		pop(S,x);
		EnQueue(Q,x);
}

6、利用两个栈s1，s2来模拟一个队列，已知栈的4个运算定义如下：
push(s,x); //入栈
pop(s,x); //出栈
StackEmpty(S); //判栈空
StackOverflow(S);//判栈满
如何利用栈的运算来实现队列的3个运算（形参由读者根据要求自己设计）
EnQueue;//入队
DeQueue;//出队
QueueEmpty;//判空

//思想：入队，用s1存放入队的元素;需要出队时,将s1的元素取出再存入s2，再取出s2
//1、对s1进行入栈操作，若s1满，必须保证s2为空，才能将s1的元素全部插入s2
//2、对s2的出栈左出队，s2为空，才能将s1的元素送进s2
bool EnQueue(Stack &s1,Stack &s2,int e){
	if(!StackOverflow(S1))//s1没满
		push(s1,e);
		return true;
	if(StackOverflow(S1) && !StackEmpty(S2))//s1满，s2不为空
		printf("队列满\n");
		return false;
	if(StackOverflow(S1) && StackEmpty(S2))//s1满，s2不为空
		while(!StackEmpty(S1))
			pop(s1,x);
			push(s2,x);
		push(s1,e);
		return true;
}


bool DeQueue(Stack &s1,Stack &s2,int &x){
	if(!StackEmpty(S2))
		pop(s2,x);
	else if(StackEmpty(S1))
		printf("队列为空\n");
	else 
		while(!StackEmpty(S1))
			pop(s1,x);
			push(s2,x);
	pop(s2,x);
}

bool QueueEmpty(Stack s1,Stack s2){
	if(StackEmpty(s1) &&StackEmpty(s2))
		return true;
	else
		return false;
}
