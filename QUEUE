队列
操作受限线性表---只允许在表的一端进行插入，在表的另一端进行删除 FIFO
队头--允许删除的一端
队尾--允许插入的一端
空队列--不含任何元素的空表
队列的顺序存储
# define MaxSize 50
typedef struct{
	int data[MaxSize];
	int front,rear;//头，尾
}SqQueue;

初始化队列
void InitQueue(SqQueue &Q){
	Q.rear=Q.front=0;//尾指针指向下一个元素的位置
}

//判空
bool QueueEmpty(SqQueue Q){
	if(Q.rear==Q.front)
		return true;
	else
		return false;
}

//入队
//队满的条件：队尾指针的下一个元素是队头，牺牲一个存储空间 (Q.rear+1)%MaxSize==Q.front
bool EnQueue(SqQueue &Q,int x){
	if((Q.rear+1)%MaxSize==Q.front)//队列已满
		return false;
	Q.data[Q.rear]=x;
	Q.rear=(Q.rear)%MaxSize
	return true;
}

//出队
bool DelQueue(SqQueue &Q,int &e){
	if(Q.rear==Q.front)
		return false;//队空
	x=Q.data[Q.front];
	Q.front=(Q.front+1)%MaxSize;
	return true;
}

//获取队头元素，用x返回
bool GetHead(SqQueue Q,int &x){
	if(Q.rear==Q.front)
		return false;//队空
	x=Q.data[Q.front];
	return true;
}

计算队列数据元素
(rear+MaxSize-front)%MaxSize

//不准浪费存储空间的前提下
#define MaxSize 100
typedef struct{
	int data[MaxSize];
	int front,rear;
	int size;//队列当前长度，入队size++，出队size--
}SqQueue;
队满
size==MaxSize-1 && Q.front==Q.rear
队空
size==0 && Q.front==Q.rear

#define MaxSize 100
typedef struct{
	int data[MaxSize];
	int front,rear;
	int tag;//tag=0-表示最近一次执行的是删除操作。tag=1-表示最近一次执行的是插入操作
}SqQueue;

队满
tag==0 && Q.front==Q.rear
队空
tag==1 && Q.front==Q.rear


//队尾指针指向队尾元素
//入队
Q.rear=(Q.rear+1)%MaxSize;
Q.data[Q.rear]=x;

//初始化
front=0；
rear=n-1;

//判空
(Q.rear+1)%MaxSize==Q.front
//队满
//牺牲存储空间
(Q.rear+2)%MaxSize==Q.front

链式存储来实现队列
typedef struct LinkNode{
	int data；
	struct LinkNode *next;
}LinkNode;//节点的定义

typedef struct{
	LinkNode *front;//队头
	LinkNode *rear;//队尾
}LinkQueue;//链队的定义

//初始化（带头节点）
void InitQueue(LinkQueue &Q){
	Q.front=Q.rear=(LinkNode *)malloc(sizeof(LinkNode));//初始时，rear和front指针都指向头节点
	Q.front->next=NULL;
}
//判空（带头节点）
bool Empty(LinkQueue &Q){
	if(Q.rear==Q.front)
		return true;
	else
		return false;
}


//初始化（不带头节点）
void InitQueue(LinkQueue &Q){
	Q.front=NULL;
	Q.rear=NULL;
}

//判空（不带头节点）
bool Empty(LinkQueue &Q){
	if(Q.front==NULL)
		return true;
	else
		return false;
}

//入队（带头节点）
bool EnQueue(LinkQueue &Q,int x){
	LinkNode *s=(LinkNode *)malloc(sizeof(LinkNode));
	if(s==NULL)
		return false;
	s->data=x;
	Q.rear->next=s;
	Q.rear=s;
	return true;
}

//入队（不带头节点）
bool EnQueue(LinkQueue &Q,int x){
	LinkNode *s=(LinkNode *)malloc(sizeof(LinkNode));
	if(s==NULL)
		return false;
	s->data=x;
	s->next=NULL;
	if(Q.front==NULL)
		Q.front=Q.rear=s;
	else
		Q.rear->next=s;
		Q.rear=s;
	return true;
}

//出队（带头节点）
bool DeQueue(LinkQueue &Q,int &x){
	if(Q.rear==Q.front)
		return false;
	LNode *p=Q.front->next;
	x=p->data;
	Q.front->next=p->next;
	if(Q.rear==p)
		Q.rear=Q.front;
	free(p);
	return true;
}

//出队（不带头节点）
bool DeQueue(LinkQueue &Q,int &x){
	if(Q.front==NULL)
		return false;
	LNode *p=Q.front;
	x=p->data;
	Q.front=p->next;
	if(Q.rear==p)
		Q.rear=Q.front=NULL;
	free(p);
	return true;
	
}






















