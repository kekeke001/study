1、编写先序遍历二叉树的非递归算法
void PreOrder(BiTree T){
	BiTree p=T;
	InitStack(S);
	while(p || !IsEmpty(S))
		if(p)
			visit(p);
			push(S,p);
			p=p->lchild;
		else
			pop(S,p);
			p=p->rchild;		
}

2、编写后序遍历二叉树的非递归算法
void PostOrder(BiTree T){
	BiTree p=T;
	InitStack(S);
	BiTNode *r=NULL;
	while(p || !IsEmpty(S))
		if(p)
			push(S,p);
			p=p->lchild;
		else
			GetTop(S,p);
			if(p->rchild!=NULL && p->rchild!=r)
				p=p->rchild;
				push(S,p);
				p=p->lchild;
			else
				pop(S,p);
				visit(p);
				r=p;
				p=NULL;	
}

3、试给出二叉树的自下而上，从右到左的层次遍历算法
void LevelOrder(BiTree T){
	InitStack(S);
	InitQueue(Q);
	BiNode *p;
	EnQueue(Q,T);
	while(!IsEmpty(Q))
		p=DeQueue(Q);
		push(S,p);
		if(p->lchild!=NULL)
			EnQueue(Q,p->lchild)
		if(p->rchild!=NULL)
			EnQueue(Q,p->rchild)
	while(!IsEmpty(S))	
		pop(S,p);
		visit(p);
}

4、假设二叉树采用二叉链表存储结构，设计一个非递归算法求二叉树的高度
int Depth(BiTree T){
	if(!T)
		return 0;
	int front=rear=-1;
	int last=level=0;
	BiTree Q[MaxSize];//队列Q，元素是二叉树的节点指针
	Q[++rear]=T;
	BiTree p;
	while(front<rear)//队不空
		p=Q[++front];
		if(p->lchild)
			Q[++rear]=p->lchild;
		if(p->rchild)
			Q[++rear]=p->rchild;
		if(front==last)//处理该层的最右节点
			level++;
			last=rear;
	return level;
}
递归算法
int depth(BiTree T){
	if(T==NULL)
		return 0;
	ldep=depth(T->lchild);
	rdep=depth(T->rchild);
	if(ldep>rdep)
		return ldep+1;
	else
		return rdep+1;
}

5、设一棵二叉树中各个节点的值互不相同，其先序遍历序列和中序遍历序列分别存于两个一维数组A[1...n]和B[1...n]中，试编写算法建立该二叉树的二叉链表
BiTree PreInCreat(int A[],int B[],int l1,int h1,int l2,int h2){
	//l1,h1为先序的第一个节点和最后一个节点；l2,h2为中序的第一个节点和最后一个节点
	int l1=l2=1;h1=h2=n;
	root=(BiTNode *)malloc(sizeof(BiTNode));
	root->data=A[l1];
	for(i=l2;B[i]!=root->data;i++);
	llen=i-l2;
	rlen=h2-i;
	if(llen)
		root->lchild=PreInCreat(A,B,l1+1,l1+llen,l2,l2+llen-1);
	else
		root->lchild=NULL;
	if(rlen)
		root->rchild=PreInCreat(A,B,h1-rlen+1,h1,,h2-rlen+1,h2);
	else
		root->rchild=NULL;
	return root;
}

6、二叉树按二叉链表形式存储，写一个判别给定二叉树是否是完全二叉树的算法
bool IsComplete(BiTree T){
	//按层次遍历，若空节点后有非空节点，则不是完全二叉树
	InitQueue(Q);
	if(!T)
		return 1;//空树为满二叉树
	EnQueue(Q,T);
	while(!IsEmpty(Q))
		DeQueue(Q,p);
		if(p)
			EnQueue(Q,p->lchild);
			EnQueue(Q,p->rchild);
		else
			while(!IsEmpty(Q))
				DeQueue(Q,p);
				if(p)
					return 0;
			return 1;
}

7、假设二叉树采用二叉链表存储结构存储，试设计一个算法，计算一棵给定二叉树所有双分支节点个数
int DsonNodes(BiTree b){
	if(b==NULL)
		return 0;
	else if(b->rchild!=NULL && b->rchild!=NULL)
		return DsonNodes(b->lchild)+DsonNodes(b->rchild)+1;
	else
		return DsonNodes(b->lchild)+DsonNodes(b->rchild);
}

8、设树B是一棵采用链式结构存储的二叉树，编写一个把树B中所有节点的左右子树进行交换的函数
void swap(BiTree b){
	if(b)
		swap(b->lchild);//递归交换左子树
		swap(b->rchild);
		temp=b->lchild;//递归交换左右孩子
		b->lchild=b->rchild;
		b->rchild=temp;
}

9、假设二叉树采用二叉链表存储结构存储，设计一个算法，求先序遍历序列中第k(1<=k<=二叉树中节点个数)个节点的值
int i=1;//遍历序号的全局变量
int PreNode(BiTree b,int k){
	if(b==NULL)
		return '#';
	if(i==k)
		return b->data;
	i++;
	ch=PreNode(b->lchild,k);
	if(ch!='#')
		return ch;
	ch=PreNode(b->rchild,k);
		return ch;
}

10、已知二叉树以二叉链表存储，编写算法完成：对于树中每个元素值为x的节点，删去以它为根的子树，并释放相应的空间
void DelXTree(BiTree b){//删除以b为根的子树-后序
	if(b)
		DelXTree(b->lchild);
		DelXTree(b->rchild);
		free(b);
}
void Search(BiTree b,int x){//层次遍历
	BiTree Q[];
	if(b)
		if(b->data==x)
			DelXTree(b);//若根节点为x,则删除整棵树
		InitQueue(Q);
		EnQueue(Q,b);
		while(!IsEmpty(Q))//队不为空，则循环
			DeQueue(Q,p);
			if(p->lchild)
				if(p->lchild->data==x)
					DelXTree(p->lchild);
					p->lchild=NULL;
				else
					EnQueue(Q,p->lchild);
			if(p->rchild)
				if(p->rchild->data==x)
					DelXTree(p->rchild);
					p->rchild=NULL;
				else
					EnQueue(Q,p->rchild);
}

11、在二叉树中查找值为x的节点，试编写算法（用C语言）打印值为x的节点的所有祖先，假设值为x的节点不多于一个
//非递归后序遍历，最后访问根节点，访问到值为x的节点时，栈中所有元素均为该节点的祖先
typedef struct{
	BiTree t;
	int tag;
}Stack;//tag=0表示左子女被访问，tag=1表示右子女被访问
void Search(BiTree bt,int x){
	stack S[];
	top=0;
	while(bt!=NULL || top>0)
		while(bt!=NULL && bt->data!=x)
			S[++top].t=bt;
			s[top].tag=0;
			bt=bt->lchild;//沿左分支
		if(bt->data==x)//找到x
				for(i=1;i<=top;i++)
				print("%d",s[i].t->data);
				exit(1);
		while (top!=0 && s[top].tag==1)
				top--;//退栈
		if(top!=0)//沿着右分支遍历
				s[top].tag=1;
				bt=s[top].t->rchild;
}

12、设一棵二叉树的节点结构为（LLINK，INFO，RLINK），ROOT为指向该二叉树根节点的指针，p和q分别指向该二叉树中任意两个节点的指针，试编写算法Ancestor(ROOT，p,q,r)，找到p和q的最近公共祖先节点r
//后序遍历--栈中存放二叉树的指针，当访问到某个节点时，栈中的所有元素都是该节点的祖先，后序遍历必然先遍历到左节点p，栈中元素均为p的祖先。先将栈复制到另一个辅助栈中，继续遍历到q时，将栈中元素与辅助站元素去匹配，第一个匹配相等的就是最近公共祖先
typedef struct{
	BiTree t;
	int tag;
}Stack;//tag=0表示左子女被访问，tag=1表示右子女被访问
stack s[],s1[];
BiTree Ancestor(BiTree ROOT,BiTNode *p,BiTNode *q){
	top=0;
	bt=ROOT;
	while(bt!=NULL || top>0)
		while(bt!=NULL &&bt!=p&& bt!=q)//节点入栈
			while(bt!=NULL)
				s[++top].t=bt;
				s[top].tag=0;
				bt=bt->lchild;
		while(top!=0 && s[top].tag==1)
			if(s[top].t==p)
				for(int i=1;i<=top;i++)
					s1[i]=s[i];
					top1=top;
			if(s[top].t==q)
				for(i=top;i>0;1--)
					for(j=top1;j>0;j--)
						if(s1[j].t==s[i].t)
							return s[i].t;
				top--;
		if(top!=0)
			s[top].tag=1;
			bt=s[top].t->rchild;
	return NULL;	
}




13、假设二叉树采用二叉链表存储结构，设计一个算法，求非空二叉树b的宽度（即具有节点数最多的那一层的节点个数）
//层次遍历
typedef struct {
	BiTree data[MaxSize];
	int level[MaxSize];
	int front,rear;
}Qu;
int BTWidth(BiTree b){
	BiTree p;
	int k,max,i,n;
	Qu.front=Qu.rear=-1;//初始化，队列为空
	Qu.data[++Qu.rear]=b;//根节点入队
	Qu.level[Qu.rear]=1;//根节点层次为1
	while(Qu.front<Qu.rear)//队列不为空
		p=Qu.data[++Qu.front];//出队
		k=Qu.level[Qu.front];//出队节点的层次
		if(p->lchild!=NULL)
			Qu.rear++;
			Qu.data[Qu.rear]=p->lchild;
			Qu.level[Qu.rear]=k+1;
		if(p->rchild!=NULL)
			Qu.rear++;
			Qu.data[Qu.rear]=p->rchild;
			Qu.level[Qu.rear]=k+1;
	max=0;i=0;//i扫描队列中所有元素
	k=1;//层数
	while(i<=Qu.rear)
		n=0;
		while(i<=Qu.rear&&Qu.level[i]==k)
			n++;
			i++;
		k=Qu.level[i];
		if(n>max)
			max=n;
	return max;
}
14、设有一棵满二叉树（所有节点值均不同），已知其先序序列为pre，设一个算法求其后序序列post
//满二叉树，任一节点的左右子树含有相同的节点
void PreToPost(int pre[],int l1,int h1,int post[],int l2,int h2){
	int half;
	if(h1>=l1)
		post[h2]=pre[l1];
		half=(h1-l1)/2;
		PreToPost(pre,l1+1,l1+half,post,l2,l2+half-1);
		PreToPost(pre,l1+half+1,h1,post,l2+half,h2-1);
}

char *pre="ABCDEFG";
char post[MaxSize];
PreToPost(pre,0,6,post,0,6);
.....

15、设计一个算法将二叉树的叶节点按从左至右的顺序连成一个单链表，表头指针为head，二叉树按二叉链表方式存储，链接时用叶节点的右指针域来存放单链表指针
//通常中/先/后序对叶节点的访问顺序都是从左到右
LinkedList head,pre=NULL;
LinkedList InOrder(BiTree bt){
	if(bt)
		InOrder(bt->lchild);
		if(bt->lchild==NULL && bt->rchild==NULL)//叶子节点
			if(pre=NULL)
				head=bt;
				pre=bt;
			else
				pre->rchild=bt;
				pre=bt;
		InOrder(bt->rchild);
		pre->rchild=NULL;
	return head;
}

16、试设计判断两个二叉树是否有相似算法，所谓二叉树T1和T2相似，指的是T1和T2都是空的二叉树或都只有一个根节点,或T1的左子树和T2的左子树是相似的，且T1的右子树和右子树是相似的
int similar(BiTree T1,BiTree T2){
	int lefts,rights;
	if(T1==NULL && T2==NULL)
		return 1;
	else if(T1==NULL || T2==NULL)
		return 0;
	else
		lefts=similar(T1-lchild,T2->lchild);
		rights=similar(T2->rchild,T2->rchild);
		return lefts&&rights;
}

17、写出在中序线索二叉树里查找指定节点在后序的前驱节点的算法
BiThrTree InPostPre(BiThrTree t,BiThrTree p){
	BiThrTree q;
	if(p->rtag==0)//p有右子女
		q=p->rchild;
	else if(p->ltag==0)//p只有左子女
		q=p->lchild;
	else if(p->lchild==NULL)//p是中序第一结点
		q=NULL;
	else//叶子节点
		while(p->ltag==1&& p->lchild!=NULL)
			p=p->lchild;
		if(p->ltag==0)
			q=p->rchild;
		else
			q=NULL;
	return q;
		
}

//编程求以孩子兄弟表示法存储森林的叶子节点数//可用中序遍历
typedef struct node{
	int data;
	struct node *fch,*nsib;//孩子与兄弟域
}*Tree;
int Leaves(Tree t){
	if(t==NULL)
		return 0;
	if(t->fch==NULL)
		return Leaves(t->nsib)+1;
	else
		return Leaves(t->nsib)+Leaves(t->fch);
}

//以孩子兄弟链表为存储结构，请设计递归算法求树的深度
int Height(CSTree bt){
	int hc,hs;
	if(bt==NULL)
		return 0;
	else
		hc=Height(bt->fch);
		hs=Height(bt->nsib);
		if(hc+1>hs)
			return hc+1;
		else
			return hs;
}

//已知一棵树的层次序列及每个节点的度，编写算法构造次数的孩子-兄弟链表
#define maxNodes 15
void createCSTree_Degree(CSTree &T,DataType e[],int degree[],int n){
//根据树节点的层次序列e[]和各节点的度degree[]构造树的孩子-兄弟链表
	CSNode *pointer=new CSNode[maxNodes];//int *p = new int[10];  //分配10个int型的内存空间
	if(pointer==NULL)
		return;
	int i,j,d,k=0;
	for(i=0;i<n;i++)//初始化
		pointer[i]->data=e[i];
		pointer->lchild=pointer->rsibling=NULL;
	for(i=0;i<n;i++)
		d=degree[i];
		if(d)
			k++;
			pointer[i]->lchild=pointer[k];
			for(j=2;j<=d;j++)
				k++;
				pointer[k-1]->rsibling=pointer[k];
	T=pointer[0];
	delete [] pointer;//delete[] p;释放内存空间
}



































