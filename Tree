//二叉树的链式存储结构
typedef struct BiTNode{
	int data;//数据域
	struct BiTNode *lchild,*rchild;//左右孩子指针
}BiTNode,*BiTree;

//二叉树的遍历
//先序遍历--递归算法
void PreOreder(BiTree T){
	if(T!=NULL)
		visit(T);
		PreOreder(T->lchild);
		PreOreder(T->rchild);
}

void InOrder(BiTree T){
	if(T!=NULL)
		InOrder(T->lchild);
		visit(T);
		InOrder(T-rchild);
}

void PostOrder(BiTree T){
	if(T!=NULL)
		PostOrder(T->lchild);
		PostOrder(T->rchild);
		visit(T);
}

//先序，中序，后序的非递归算法
void InOrder(BiTree T){
	InitStack(S);
	BiTree p=T;
	while(p || !IsEmpty(S))
		if(p)
			push(S,p);
			p=p->lchild;
		else
			pop(S,p);
			visit(p);
			p=p->rchild;
}




//层次遍历
void LevelOreder(BiTree T){
	InitQueue(Q);//初始化辅助队列
	BiTree p;
	EnQueue(Q,T);//根节点入队
	while(!IsEmpty(Q))
		DeQueue(Q,p);//队头节点出队
		visit(p);//访问出队节点
		if(p->lchild!=NULL)
			EnQueue(Q,p->lchild);
		if(p->rchild!=NULL)
			EnQueue(Q,p->rchild);
}


//线索二叉树
//线索二叉树节点
typedef struct ThreadNode{
	int data;
	struct ThreadNode *lchild,rchild;
	int ltag,rtag;
}ThreadNode,*ThreadTree

//中序线索化
void InThread(ThreadTree T){
	if(T!=NULL)
		InThread(T->lchild);
		visit(T);
		InThread(T->rchild);
}
void visit(ThreadNode *q){
	if(q->lchild==NULL)
		q->lchild=pre;
		q->tag=1;
	if(pre!=NULL && pre->rchild==NULL)
		pre->rchild=p;
		pre->tag=1;
	pre=q;
}
ThreadNode *pre=NULL;//全局变量，初始为NULL
void CreateInThread(ThreadTree T){
	pre=NULL;
	if(T!=NULL)//非空二叉树才能线索化
		InThread(T);
		if(pre->rchild==NULL)
			pre->rtag=1;//处理遍历的最后一个节点
}
//中序线索化（王道）
void InThread(ThreadTree &p,ThreadTree &pre){
	if(p!=NULL)
		InThread(p->lchild,pre);
		if(q->lchild==NULL)
			q->lchild=pre;
			q->tag=1;
		if(pre!=NULL && pre->rchild==NULL)
			pre->rchild=p;
			pre->tag=1;
		pre=q;
		InThread(p->rchild,pre);
}
void CreateInThread(ThreadTree T){
	ThreadTree pre=NULL;
	if(T!=NULL)//非空二叉树才能线索化
		InThread(T,pre);
		pre->rchild=NULL;
		pre->rtag=1;//处理遍历的最后一个节点
}
}

//先序线索化--爱的魔力转转圈
void PreThread(ThreadTree T){
	if(T!=NULL)
		visit(T);
		if(T->ltag==0)
			PreThread(T->lchild);
		PreThread(T->rchild);	
}
void visit(ThreadNode *q){
	if(q->lchild==NULL)
		q->lchild=pre;
		q->ltag=1;
	if(pre!=NULL && pre->rchild==NULL)
		pre->rchild=p;
		pre->rtag=1;
	pre=p;
}
ThreadNode *pre=NULL;//全局变量，初始为NULL
void CreatePreThread(Thread Tree T){
	pre=NULL;
	if(T!=NULL)
		PreThread(T);
	if(pre->rchild==NULL)
		pre->rtag==1;
}
//先序线索化（王道）
void PreThread(ThreadTree p,ThreadNode &pre){
	if(p!=NULL)
		if(q->lchild==NULL)
			q->lchild=pre;
			q->ltag=1;
		if(pre!=NULL && pre->rchild==NULL)
			pre->rchild=p;
			pre->rtag=1;
		pre=p;
		if(p->ltag==0)
			PreThread(p->lchild,pre);
		PreThread(p->rchild,pre);
}
void CreatePreThread(Thread Tree T){
	ThreadNode pre=NULL;
	if(T!=NULL)
		PreThread(T,pre);
	if(pre->rchild==NULL)
		pre->rtag==1;

//后续线索化
void PostThread(ThreadTree T){
	if(T!=NULL)
		PostThread(T->lchild);
		PostThread(T->rchild);
		visit(T);
}
void visit(ThreadNode *p){
	if(p->lchild==NULL)
		p->lchild=pre;
		p->ltag=1;
	if(pre && pre->rchild==NULL)
		pre->rchild=p;
		pre->rtag=1;
	pre=p;
}
ThreadNode *pre=NULL;//全局变量，初始为NULL
void CreatePostThread(ThreadTree T){
	pre=NULL;
	if(T!=NULL)
		PostThread(T);
	if(pre->rchild==NULL)
		pre->rtag==1;
}
//后续线索化(王道)
void PostThread(ThreadTree p,ThreadTree &pre){
	if(T!=NULL)
		PostThread(T->lchild);
		PostThread(T->rchild);
		if(p->lchild==NULL)
			p->lchild=pre;
			p->ltag=1;
		if(pre && pre->rchild==NULL)
			pre->rchild=p;
			pre->rtag=1;
		pre=p;
}
void CreatePostThread(ThreadTree T){
	ThreadTree pre=NULL;
	if(T!=NULL)
		PostThreadThread(T);
		if(pre->rchild==NULL)
			pre->rtag==1;
}

//中序线索二叉树找中序后继
//找到以p为根的子树中，第一个被中序遍历的节点
ThreadNode *Firstnode(ThreadNode *p){
	while(p->ltag==0)//找到最左下节点
		p=p->lchild;
	return p;
}
//在中序线索二叉树中找到p节点的后继
ThreadNode *Nextnode(ThreadNode *p){
	if(p->rtag==0)
		return Firstnode(p->rchild);
	else
		return p->rchild;
}
//对中序二叉树进行中序遍历(利用线索实现非递归)
void InOrder(ThreadNode *T){
	for(ThreadNode *p=Firstnode(T);p!=NULL;p=p->Nextnode(p))
		visit(p);
}

//中序线索二叉树找中序前驱
ThreadNode *Lastnode(ThreadNode *p){
	//循环找到以p为根的最右下节点
	while(p->rtag==0)
		p=p->rchild;
	return p;
}
ThreadNode *Prenode(ThreadNode *p)
{	if(p->ltag==0)
		return Lastnode(p->lchild);
	else
		return p->lchild;
}
//可以进行逆向中序遍历

//先序二叉树找后继
ThreadNode *Nextnode(ThreadNode *p){
	if(p->rtag==0 && p->lchild!=NULL)
		return p->lchild;
	else
		return p->rchild;
}
//先序二叉树找前驱--只能从头开始遍历，可以用三叉链表来存储树（+指向其父节点的指针）
需要找到其父节点
1、p是左孩子--父节点即为其前驱
2、p是右孩子，其左兄弟为空--父节点即为其前驱
3、p是右孩子，其左兄弟不为空--左兄弟子树中最后一个被先序遍历的节点（从根节点出发，尽可能往右走）
4、根节点，没有先序前驱

//后序二叉树找前驱
1、p->ltag==1,pre=p->lchild
2、p->ltag==0,一定有左孩子
	p有右孩子--后驱前驱为其右孩子
	p没有右孩子--后驱前驱为其左孩子
	
//后序后继--只能从头开始遍历，可以用三叉链表来存储树（+指向其父节点的指针）
1、p->rtag==1,pre=p->rchild
2、p->rtag==0,一定有右孩子
	1、p是右孩子--父节点即为其后继
	2、p是左孩子，其右兄弟为空--父节点即为其后继
	3、p是左孩子，其右兄弟不为空--右兄弟子树中最先一个被后序遍历的节点（从根节点出发，尽可能往左走）
	4、根节点，没有先序后继

###树的存储结构
1、双亲表示法：（顺序存储）
#define Max_Tree_Size
typedef struct{
	ElemType data;
	int parent;
}PTNode;
typedef struct{
	PTNode nodes[Max_Tree_Size];
	int n;
}PTree；

2、孩子表示法（链式存储）
struct CTNode{
	int child;//孩子节点在数组中的位置
	struct CTNode *next;//下个孩子
};
typedef struct{
	int data;
	struct CTNode *fristchild;//第一个孩子
}CTBox;
typedef struct{
	CTBox nodes[Max_Tree_Size];
	int n,r;//节点数和根的位置
	
}
3、孩子兄弟表示法（链式）
typedef struct CSNode{
	int data;
	struct CSNode *firstchild,*nextsibling;//第一个孩子指针和右兄弟指针
}CSNode,*CSTree

//树的先根遍历--类似于先序遍历
void PreOrder(TreeNode *R){
	if(R!=NULL)
		visit(R);
		while(R还有下一个子树T)
			PreOrder(T);
}

//树的后根遍历--与这棵树转换成相应二叉树对应的中序遍历序列相同--深度优先遍历
void PostOrder(TreeNode *R){
	if(R!=NULL)
		while(R还有下一个子树T)
			PostOrder(T);
		visit(R);
}

//树的层次遍历（用队列实现）--广度优先遍历

//先序遍历森林--效果等同于依次对树进行先根遍历/相应二叉树的先序遍历
若森林为非空，按以下规则遍历：
访问森林中第一颗树的根节点
先序遍历第一颗树中根节点的子树森林
先序遍历除去第一颗树之后剩余树构成的森林

//中序遍历森林效果等同于依次对树进行后根遍历/相应二叉树的中序遍历（可通过孩子兄弟表示法存储森林--再对二叉树进行中序遍历）
若森林为非空，按以下规则遍历：
中序遍历森林中第一颗树节点的根节点的子树森林
访问第一颗树的根节点
中序遍历除去第一颗树之后剩余的树构成的森林








